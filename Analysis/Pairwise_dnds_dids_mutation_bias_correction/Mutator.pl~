#!/usr/bin/perl -w

$species=$ARGV[0];
$analysis=$ARGV[1];
$base_dir=$ARGV[2];

$cod{TTT}="Phe";  $cod{TCT}="Ser";  $cod{TAT}="Tyr";  $cod{TGT}="Cys";
$cod{TTC}="Phe";  $cod{TCC}="Ser";  $cod{TAC}="Tyr";  $cod{TGC}="Cys";
$cod{TTA}="Leu";  $cod{TCA}="Ser";  $cod{TAA}="STO";  $cod{TGA}="STO";
$cod{TTG}="Leu";  $cod{TCG}="Ser";  $cod{TAG}="STO";  $cod{TGG}="Trp";

$cod{CTT}="Leu";  $cod{CCT}="Pro";  $cod{CAT}="His";  $cod{CGT}="Arg";
$cod{CTC}="Leu";  $cod{CCC}="Pro";  $cod{CAC}="His";  $cod{CGC}="Arg";
$cod{CTA}="Leu";  $cod{CCA}="Pro";  $cod{CAA}="Gln";  $cod{CGA}="Arg";
$cod{CTG}="Leu";  $cod{CCG}="Pro";  $cod{CAG}="Gln";  $cod{CGG}="Arg";

$cod{ATT}="Ile";  $cod{ACT}="Thr";  $cod{AAT}="Asn";  $cod{AGT}="Ser";
$cod{ATC}="Ile";  $cod{ACC}="Thr";  $cod{AAC}="Asn";  $cod{AGC}="Ser";
$cod{ATA}="Ile";  $cod{ACA}="Thr";  $cod{AAA}="Lys";  $cod{AGA}="Arg";
$cod{ATG}="Met";  $cod{ACG}="Thr";  $cod{AAG}="Lys";  $cod{AGG}="Arg";

$cod{GTT}="Val";  $cod{GCT}="Ala";  $cod{GAT}="Asp";  $cod{GGT}="Gly";
$cod{GTC}="Val";  $cod{GCC}="Ala";  $cod{GAC}="Asp";  $cod{GGC}="Gly";
$cod{GTA}="Val";  $cod{GCA}="Ala";  $cod{GAA}="Glu";  $cod{GGA}="Gly";
$cod{GTG}="Val";  $cod{GCG}="Ala";  $cod{GAG}="Glu";  $cod{GGG}="Gly";

open LOG, ">>${base_dir}/Analysis/log.txt";

$in_gene_file="${base_dir}/Analysis/Pairwise_dnds_dids/${species}_Pairwise_dnds_dids/${species}_core_gene_alignment_no_STO.fasta";
$in_int_file="${base_dir}/Analysis/Core_genome_alignment/${species}_Core_genome_alignment/${species}_core_intergenic_alignment.fasta";

open OUTPUT_GENE, ">${base_dir}/Analysis/${analysis}/${species}_$analysis/${species}_core_gene_alignment_mutated.fasta";
open OUTPUT_INT, ">${base_dir}/Analysis/${analysis}/${species}_$analysis/${species}_core_intergenic_alignment_mutated.fasta";

$inmut="${base_dir}/Analysis/${analysis}/Mutation_bias.tab";
#$inmut="${base_dir}/Analysis/${analysis}/Mutation_no_bias.tab";

$strs=100;

$typecount=0;
open INMUT, $inmut;
while(<INMUT>){
	if(/^(\S+)\s+(\S+)/){
		$type=$1;$count=$2;
		for $x($typecount..($typecount+($count-1))){
			$mut{$x}=$type;
		}
		$typecount=($typecount+$count);
	}
}
$tmuts=$typecount;

open INPUT, $in_gene_file;
while(<INPUT>){
	if(/^([ATGCN]+)/){
		$gene_seq=$1;
		$gene_len=length($gene_seq);
		last;
	}
}
open INPUT, $in_int_file;
while(<INPUT>){
	if(/^([ATGCN]+)/){
		$int_seq=$1;
		$int_len=length($int_seq);
		last;
	}
}

$seq="$gene_seq$int_seq";
$tsites=length($seq);

$max_muts=int(($tsites / 100) / 2);

for $y(1..$strs){
	
	$muts=0;
	@mutseq=split(//, $seq);
	
	while($muts < $max_muts){
		
		$ransite=int(rand($tsites));
		$ranmut=int(rand($tmuts));
		@mutbase=split(//, $mut{$ranmut});
		
		if($mutbase[0] eq $mutseq[$ransite]){
			if($ransite < $gene_len){
				if($ransite%3==0){
					$a=$ransite;
					$refcod="$mutseq[$a]$mutseq[($a+1)]$mutseq[($a+2)]";
					$mutcod="$mutbase[1]$mutseq[($a+1)]$mutseq[($a+2)]";
				}elsif($ransite%3==1){
					$a=($ransite-1);
					$refcod="$mutseq[$a]$mutseq[($a+1)]$mutseq[($a+2)]";
					$mutcod="$mutseq[$a]$mutbase[1]$mutseq[($a+2)]";
				}elsif($ransite%3==2){
					$a=($ransite-2);
					$refcod="$mutseq[$a]$mutseq[($a+1)]$mutseq[($a+2)]";
					$mutcod="$mutseq[$a]$mutseq[($a+1)]$mutbase[1]";
				}
				if($cod{$refcod} eq "STO" or $cod{$mutcod} eq "STO"){
					#print "STO $refcod to $mutcod\n";
				}elsif($cod{$refcod} ne "STO" && $cod{$mutcod} ne "STO"){
					$mutseq[$ransite]=$mutbase[1];
					$muts++;
					#print "Strain $y, mutation $muts completed.\n";
				}
			}else{
				$mutseq[$ransite]=$mutbase[1];
				$muts++;
				#print "Strain $y, mutation $muts completed.\n";
			}
		}
	}
	
	print OUTPUT_GENE ">$y\n";
	for ($i=0; $i<$gene_len; $i++){
		print OUTPUT_GENE "$mutseq[$i]";
	}
	print OUTPUT_GENE "\n";
	
	print OUTPUT_INT ">$y\n";
	for ($i=$gene_len; $i<$tsites; $i++){
		print OUTPUT_INT "$mutseq[$i]";
	}
	print OUTPUT_INT "\n";
}

